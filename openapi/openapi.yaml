openapi: 3.0.3
info:
  title: Jurono API
  version: 1.0.0
  description: |-

    # Jurono Legal Practice Management API

    Complete REST API for the Jurono Legal Practice Management Platform. This API provides comprehensive endpoints for:

    - **Authentication & User Management** - Secure user authentication, registration, and profile management
    - **Organization Management** - Multi-tenant organization operations and member management  
    - **Legal Practice Tools** - Case management, client profiles, and legal workflows
    - **JuroLib Integration** - Lawyer directory search and profile management
    - **Compliance & GDPR** - Data protection, privacy controls, and compliance reporting
    - **Document Management** - Secure document handling and version control
    - **Analytics & Reporting** - Performance metrics and business intelligence

    ## Authentication

    All API endpoints require authentication via JWT Bearer tokens unless otherwise specified.
    Obtain a token via the `/api/auth/login` endpoint.

    ## Rate Limiting

    API requests are rate-limited to prevent abuse:
    - Authentication endpoints: 5 requests per minute
    - General endpoints: 100 requests per minute  
    - Analytics endpoints: 20 requests per minute

    ## Error Handling

    All errors follow a consistent format with appropriate HTTP status codes and detailed error messages.

    ## Data Formats

    - All timestamps are in ISO 8601 format (UTC)
    - All IDs are UUIDs unless otherwise specified
    - Pagination uses cursor-based pagination for performance
          
  contact:
    name: Jurono Support Team
    email: support@jurono.eu
    url: https://jurono.eu/support
  license:
    name: Proprietary
    url: https://jurono.eu/terms
  termsOfService: https://jurono.eu/terms
  x-logo:
    url: https://jurono.eu/logo.png
    altText: Jurono Logo
servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api-staging.jurono.eu
    description: Staging server
  - url: https://api.jurono.eu
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token obtained from /api/auth/login
  parameters:
    organizationId:
      name: organizationId
      in: path
      required: true
      description: UUID of the organization
      schema:
        type: string
        format: uuid
    userId:
      name: userId
      in: path
      required: true
      description: UUID of the user
      schema:
        type: string
        format: uuid
    page:
      name: page
      in: query
      description: Page number for pagination (1-based)
      schema:
        type: integer
        minimum: 1
        default: 1
    limit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    search:
      name: search
      in: query
      description: Search term for filtering results
      schema:
        type: string
        minLength: 1
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: UNAUTHORIZED
            message: Authentication required. Please provide a valid JWT token.
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: FORBIDDEN
            message: You do not have permission to perform this action.
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: NOT_FOUND
            message: The requested resource was not found.
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: INTERNAL_SERVER_ERROR
            message: An unexpected error occurred. Please try again later.
    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: RATE_LIMIT_EXCEEDED
            message: Too many requests. Please try again later.
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: lawyer@example.com
        password:
          type: string
          minLength: 8
          description: User password
          example: SecurePass123!
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: rt_1234567890abcdef
        user:
          $ref: '#/components/schemas/User'
        expiresIn:
          type: integer
          description: Token expiration time in seconds
          example: 3600
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: newuser@example.com
        password:
          type: string
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]
          description: Password with minimum 8 characters, including uppercase, lowercase, number, and special character
          example: SecurePass123!
        firstName:
          type: string
          minLength: 1
          maxLength: 100
          description: User first name
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          description: User last name
          example: Doe
        phone:
          type: string
          pattern: ^\+?[1-9]\d{1,14}$
          description: Phone number in international format
          example: '+49123456789'
        userType:
          type: string
          enum:
            - LAWYER
            - CLIENT
            - USER
          default: LAWYER
          description: Type of user account
        firmName:
          type: string
          minLength: 2
          maxLength: 200
          description: Law firm name (required for LAWYER type)
          example: Doe & Associates Law Firm
    PasswordResetRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Email address for password reset
          example: user@example.com
    PasswordResetConfirm:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: Password reset token received via email
          example: prt_1234567890abcdef
        newPassword:
          type: string
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]
          description: New password meeting complexity requirements
          example: NewSecurePass123!
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        firstName:
          type: string
          description: User first name
          example: John
        lastName:
          type: string
          description: User last name
          example: Doe
        phone:
          type: string
          nullable: true
          description: User phone number
          example: '+49123456789'
        isAdmin:
          type: boolean
          description: Whether user has admin privileges
          example: false
        isEmailVerified:
          type: boolean
          description: Whether user email is verified
          example: true
        locale:
          type: string
          description: User preferred language locale
          example: en-US
        timezone:
          type: string
          description: User timezone
          example: Europe/Berlin
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          description: Last login timestamp
          example: '2024-08-16T14:30:00Z'
        createdAt:
          type: string
          format: date-time
          description: User creation timestamp
          example: '2024-01-15T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: '2024-08-16T14:30:00Z'
    UserUpdate:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 100
          description: User first name
          example: John
        lastName:
          type: string
          minLength: 1
          maxLength: 100
          description: User last name
          example: Doe
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        phone:
          type: string
          pattern: ^\+?[1-9]\d{1,14}$
          description: Phone number in international format
          example: '+49123456789'
        locale:
          type: string
          description: User preferred language locale
          example: en-US
        timezone:
          type: string
          description: User timezone
          example: Europe/Berlin
    UserWithMemberships:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            memberships:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  role:
                    type: string
                    enum:
                      - OWNER
                      - ADMIN
                      - LAWYER
                      - STAFF
                      - ACCOUNTANT
                      - CLIENT
                      - INVITED
                  status:
                    type: string
                    enum:
                      - ACTIVE
                      - PENDING
                      - SUSPENDED
                      - DEACTIVATED
                  organization:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        plan:
          type: string
          enum:
            - FREE
            - PRO
            - EXECUTIVE
        isActive:
          type: boolean
        defaultLocale:
          type: string
        contactEmail:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ComplianceCheck:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
          enum:
            - GDPR_DATA_RETENTION
            - GDPR_RIGHT_TO_ACCESS
            - GDPR_RIGHT_TO_DELETION
            - ACCESS_CONTROL
            - CUSTOM
        status:
          type: string
          enum:
            - PENDING
            - RUNNING
            - COMPLETED
            - FAILED
            - SCHEDULED
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        lastRunAt:
          type: string
          format: date-time
          nullable: true
        nextRunAt:
          type: string
          format: date-time
          nullable: true
        results:
          type: object
          nullable: true
    DataExportRequest:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - USER_DATA
            - ORGANIZATION_DATA
            - MANDATE_DATA
            - CLIENT_DATA
            - COMPLETE_EXPORT
            - ANONYMIZED_EXPORT
        filters:
          type: object
    LawyerProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique lawyer profile identifier
        firstName:
          type: string
          description: Lawyer first name
          example: Dr. Maria
        lastName:
          type: string
          description: Lawyer last name
          example: Schmidt
        email:
          type: string
          format: email
          description: Lawyer email address
          example: maria.schmidt@lawfirm.de
        phone:
          type: string
          description: Lawyer phone number
          example: '+49301234567'
        specializations:
          type: array
          items:
            type: string
          description: Areas of legal specialization
          example:
            - Corporate Law
            - Tax Law
            - Commercial Law
        city:
          type: string
          description: Lawyer location city
          example: Berlin
        region:
          type: string
          description: Lawyer location region/state
          example: Berlin
        country:
          type: string
          description: Lawyer location country
          example: Germany
        firmName:
          type: string
          description: Law firm name
          example: Schmidt & Partners
        website:
          type: string
          format: uri
          description: Lawyer or firm website
          example: https://schmidtpartners.de
        yearsOfExperience:
          type: integer
          minimum: 0
          description: Years of legal practice experience
          example: 15
        barNumber:
          type: string
          description: Bar association number
          example: BAR12345
        languages:
          type: array
          items:
            type: string
          description: Languages spoken
          example:
            - German
            - English
            - French
        isVerified:
          type: boolean
          description: Whether lawyer profile is verified
          example: true
        createdAt:
          type: string
          format: date-time
          description: Profile creation timestamp
    LawyerSearchRequest:
      type: object
      properties:
        query:
          type: string
          description: Search query for lawyer name or firm
          example: Schmidt
        specialization:
          type: string
          description: Legal specialization filter
          example: Corporate Law
        city:
          type: string
          description: City filter
          example: Berlin
        region:
          type: string
          description: Region/state filter
          example: Berlin
        minExperience:
          type: integer
          minimum: 0
          description: Minimum years of experience
          example: 5
        language:
          type: string
          description: Language requirement
          example: English
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number for pagination
        limit:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
          description: Number of results per page
    LawyerSearchResponse:
      type: object
      properties:
        lawyers:
          type: array
          items:
            $ref: '#/components/schemas/LawyerProfile'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        totalCount:
          type: integer
          description: Total number of matching lawyers
          example: 156
        searchTime:
          type: number
          description: Search execution time in milliseconds
          example: 45.6
    PaginationInfo:
      type: object
      properties:
        currentPage:
          type: integer
          description: Current page number
          example: 1
        totalPages:
          type: integer
          description: Total number of pages
          example: 8
        pageSize:
          type: integer
          description: Number of items per page
          example: 20
        totalItems:
          type: integer
          description: Total number of items
          example: 156
        hasNextPage:
          type: boolean
          description: Whether there is a next page
          example: true
        hasPreviousPage:
          type: boolean
          description: Whether there is a previous page
          example: false
    OrganizationCreate:
      type: object
      required:
        - name
        - contactEmail
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 200
          description: Organization name
          example: Acme Law Firm
        contactEmail:
          type: string
          format: email
          description: Primary contact email
          example: contact@acmelaw.com
        phone:
          type: string
          description: Organization phone number
          example: '+49301234567'
        website:
          type: string
          format: uri
          description: Organization website
          example: https://acmelaw.com
        address:
          $ref: '#/components/schemas/Address'
        plan:
          type: string
          enum:
            - FREE
            - PRO
            - EXECUTIVE
          default: FREE
          description: Subscription plan
        defaultLocale:
          type: string
          default: en-US
          description: Default language locale
          example: de-DE
    OrganizationUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 200
          description: Organization name
        contactEmail:
          type: string
          format: email
          description: Primary contact email
        phone:
          type: string
          description: Organization phone number
        website:
          type: string
          format: uri
          description: Organization website
        address:
          $ref: '#/components/schemas/Address'
        defaultLocale:
          type: string
          description: Default language locale
    Address:
      type: object
      properties:
        street:
          type: string
          description: Street address
          example: Unter den Linden 1
        city:
          type: string
          description: City
          example: Berlin
        postalCode:
          type: string
          description: Postal code
          example: '10117'
        region:
          type: string
          description: State or region
          example: Berlin
        country:
          type: string
          description: Country
          example: Germany
    Membership:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Membership identifier
        role:
          type: string
          enum:
            - OWNER
            - ADMIN
            - LAWYER
            - STAFF
            - ACCOUNTANT
            - CLIENT
            - INVITED
          description: User role in organization
        status:
          type: string
          enum:
            - ACTIVE
            - PENDING
            - SUSPENDED
            - DEACTIVATED
          description: Membership status
        organizationId:
          type: string
          format: uuid
          description: Organization identifier
        userId:
          type: string
          format: uuid
          description: User identifier
        invitedBy:
          type: string
          format: uuid
          nullable: true
          description: User who sent the invitation
        invitedAt:
          type: string
          format: date-time
          nullable: true
          description: Invitation timestamp
        joinedAt:
          type: string
          format: date-time
          nullable: true
          description: Join timestamp
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
    MembershipInvite:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
          description: Email address of person to invite
          example: newmember@example.com
        role:
          type: string
          enum:
            - ADMIN
            - LAWYER
            - STAFF
            - ACCOUNTANT
            - CLIENT
          description: Role to assign to new member
          example: LAWYER
        message:
          type: string
          maxLength: 500
          description: Optional invitation message
          example: Welcome to our law firm!
    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: VALIDATION_ERROR
        message:
          type: string
          description: Human-readable error message
          example: The provided email address is invalid.
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: '2024-08-16T14:30:00Z'
        path:
          type: string
          description: API endpoint path
          example: /api/users
    ValidationError:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          enum:
            - VALIDATION_ERROR
          description: Error code
        message:
          type: string
          description: Validation error message
        field:
          type: string
          description: Field that failed validation
          example: email
        value:
          type: string
          description: Invalid value that was provided
          example: invalid-email
        validationRules:
          type: array
          items:
            type: string
          description: List of validation rules that failed
          example:
            - must be a valid email address
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message
          example: Operation completed successfully
        data:
          type: object
          description: Response data
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
    ApiToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum:
            - SERVICE
            - USER
            - WEBHOOK
            - INTERNAL
            - TEMP
        scopes:
          type: array
          items:
            type: string
        isActive:
          type: boolean
        expiresAt:
          type: string
          format: date-time
        lastUsedAt:
          type: string
          format: date-time
        usageCount:
          type: integer
        rateLimit:
          type: integer
        createdAt:
          type: string
          format: date-time
        creator:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
tags:
  - name: Authentication
    description: User authentication, registration, and session management
    externalDocs:
      description: Authentication Guide
      url: https://docs.jurono.eu/authentication
  - name: Users
    description: User profile management and account operations
    externalDocs:
      description: User Management Guide
      url: https://docs.jurono.eu/users
  - name: Organizations
    description: Multi-tenant organization management and settings
    externalDocs:
      description: Organization Management Guide
      url: https://docs.jurono.eu/organizations
  - name: JuroLib
    description: Lawyer directory search and profile management
    externalDocs:
      description: JuroLib Integration Guide
      url: https://docs.jurono.eu/jurolib
  - name: Compliance
    description: GDPR compliance, data protection, and privacy controls
    externalDocs:
      description: Compliance & GDPR Guide
      url: https://docs.jurono.eu/compliance
  - name: Analytics
    description: Performance metrics and business intelligence
    externalDocs:
      description: Analytics Guide
      url: https://docs.jurono.eu/analytics
  - name: Notifications
    description: Email notifications and communication management
    externalDocs:
      description: Notifications Guide
      url: https://docs.jurono.eu/notifications
  - name: Search
    description: Advanced search capabilities across platform data
    externalDocs:
      description: Search Guide
      url: https://docs.jurono.eu/search
  - name: Billing
    description: Subscription management and billing operations
    externalDocs:
      description: Billing Guide
      url: https://docs.jurono.eu/billing
  - name: Performance
    description: System performance monitoring and health checks
    externalDocs:
      description: Performance Monitoring Guide
      url: https://docs.jurono.eu/performance
paths:
  /api/analytics/dashboard:
    get:
      tags:
        - Analytics
      summary: Get dashboard metrics
      description: Get comprehensive analytics dashboard data
      security:
        - bearerAuth: []
      parameters:
        - name: days
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
        - name: organizationId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Dashboard metrics retrieved successfully
        '403':
          description: Analytics access required
  /api/analytics/events:
    get:
      tags:
        - Analytics
      summary: Get analytics events
      description: Retrieve analytics events with filtering
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
        - name: event
          in: query
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Analytics events retrieved successfully
  /api/analytics/track:
    post:
      tags:
        - Analytics
      summary: Track custom event
      description: Track a custom analytics event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  description: Event name
                metadata:
                  type: object
                  description: Event metadata
                sessionId:
                  type: string
                  description: Session ID
                path:
                  type: string
                  description: Current path
              required:
                - event
      responses:
        '200':
          description: Event tracked successfully
  /api/analytics/reports:
    post:
      tags:
        - Analytics
      summary: Generate analytics report
      description: Generate a comprehensive analytics report
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - daily
                    - weekly
                    - monthly
                    - custom
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                organizationId:
                  type: string
                  format: uuid
              required:
                - type
      responses:
        '200':
          description: Report generated successfully
  /api/analytics/funnel:
    post:
      tags:
        - Analytics
      summary: Get funnel analysis
      description: Analyze conversion funnel for specified steps
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                steps:
                  type: array
                  items:
                    type: string
                  minItems: 2
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                organizationId:
                  type: string
                  format: uuid
              required:
                - steps
                - startDate
                - endDate
      responses:
        '200':
          description: Funnel analysis completed
  /api/analytics/cohorts:
    get:
      tags:
        - Analytics
      summary: Get cohort analysis
      description: Analyze user retention by cohort
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum:
              - weekly
              - monthly
            default: monthly
        - name: periods
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 24
            default: 12
      responses:
        '200':
          description: Cohort analysis completed
  /api/analytics/performance:
    get:
      tags:
        - Analytics
      summary: Get system performance metrics
      description: Get real-time and historical system performance data
      security:
        - bearerAuth: []
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
            enum:
              - 1h
              - 6h
              - 24h
              - 7d
            default: 24h
      responses:
        '200':
          description: Performance metrics retrieved
  /api/analytics/realtime:
    get:
      tags:
        - Analytics
      summary: Get real-time analytics data
      description: Get current real-time analytics and activity data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Real-time data retrieved
  /api/tokens:
    get:
      summary: List API tokens
      description: Get a list of API tokens (admin only)
      tags:
        - API Tokens
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum:
              - SERVICE
              - USER
              - WEBHOOK
              - INTERNAL
              - TEMP
          description: Filter by token type
        - in: query
          name: active
          schema:
            type: boolean
          description: Filter by active status
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of tokens per page
      responses:
        '200':
          description: List of API tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApiToken'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
    post:
      summary: Create API token
      description: Create a new API token (admin only)
      tags:
        - API Tokens
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - type
                - scopes
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 200
                description:
                  type: string
                  maxLength: 1000
                type:
                  type: string
                  enum:
                    - SERVICE
                    - USER
                    - WEBHOOK
                    - INTERNAL
                    - TEMP
                scopes:
                  type: array
                  items:
                    type: string
                  minItems: 1
                expiresAt:
                  type: string
                  format: date-time
                organizationId:
                  type: string
                  format: uuid
                rateLimit:
                  type: integer
                  minimum: 1
                  maximum: 10000
      responses:
        '201':
          description: API token created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiToken'
                  - type: object
                    properties:
                      token:
                        type: string
                        description: The actual token (only shown once)
  /api/tokens/service:
    post:
      summary: Create service token
      description: Create a service token for integrations like Brevo (admin only)
      tags:
        - API Tokens
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - scopes
              properties:
                name:
                  type: string
                description:
                  type: string
                scopes:
                  type: array
                  items:
                    type: string
                expiresAt:
                  type: string
                  format: date-time
                rateLimit:
                  type: integer
      responses:
        '201':
          description: Service token created successfully
  /api/tokens/webhook:
    post:
      summary: Create webhook token
      description: Create a webhook token for receiving webhooks (admin only)
      tags:
        - API Tokens
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
                organizationId:
                  type: string
                  format: uuid
      responses:
        '201':
          description: Webhook token created successfully
  /api/tokens/{tokenId}:
    get:
      summary: Get API token details
      description: Get details of a specific API token (admin only)
      tags:
        - API Tokens
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tokenId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: API token details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
        '404':
          description: Token not found
  /api/tokens/{tokenId}/usage:
    get:
      summary: Get token usage statistics
      description: Get usage statistics for a specific API token (admin only)
      tags:
        - API Tokens
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tokenId
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: days
          schema:
            type: integer
            minimum: 1
            maximum: 365
            default: 30
          description: Number of days to include in statistics
      responses:
        '200':
          description: Token usage statistics
  /api/tokens/{tokenId}/revoke:
    post:
      summary: Revoke API token
      description: Revoke (deactivate) an API token (admin only)
      tags:
        - API Tokens
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: tokenId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Token revoked successfully
        '404':
          description: Token not found
  /api/tokens/scopes:
    get:
      summary: Get available token scopes
      description: Get list of available scopes for API tokens
      tags:
        - API Tokens
      responses:
        '200':
          description: List of available scopes
          content:
            application/json:
              schema:
                type: object
                properties:
                  scopes:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                        description:
                          type: string
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: |
        Authenticate user with email and password. Returns JWT token for subsequent API requests.

        **Rate Limiting**: 5 attempts per minute per IP address.

        **Security Features**:
        - Progressive delay on failed attempts
        - Account lockout after multiple failures
        - IP-based rate limiting
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              lawyer_login:
                summary: Lawyer login example
                value:
                  email: lawyer@example.com
                  password: SecurePass123!
              client_login:
                summary: Client login example
                value:
                  email: client@example.com
                  password: ClientPass456!
      responses:
        '200':
          description: Login successful
          headers:
            X-RateLimit-Remaining:
              description: Number of login attempts remaining
              schema:
                type: integer
                example: 4
            X-RateLimit-Reset:
              description: Time when rate limit resets (Unix timestamp)
              schema:
                type: integer
                example: 1692181800
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                successful_login:
                  summary: Successful login response
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    refreshToken: rt_1234567890abcdef
                    user:
                      id: 550e8400-e29b-41d4-a716-446655440000
                      email: lawyer@example.com
                      firstName: John
                      lastName: Doe
                      isAdmin: false
                      isEmailVerified: true
                    expiresIn: 3600
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          description: Invalid credentials or account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    error: INVALID_CREDENTIALS
                    message: Invalid email or password
                    timestamp: '2024-08-16T14:30:00Z'
                account_locked:
                  summary: Account temporarily locked
                  value:
                    error: ACCOUNT_LOCKED
                    message: Account temporarily locked due to multiple failed login attempts. Try again in 15 minutes.
                    timestamp: '2024-08-16T14:30:00Z'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: |
        Register a new user account with comprehensive validation and security features.

        **Password Requirements**:
        - Minimum 8 characters
        - Must contain uppercase and lowercase letters
        - Must contain at least one number
        - Must contain at least one special character

        **Account Types**:
        - `LAWYER`: Creates law firm organization and sets user as owner
        - `CLIENT`: Creates basic user account
        - `USER`: Generic user account

        **Post-Registration**:
        - Email verification required for account activation
        - Welcome email sent with verification link
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              lawyer_registration:
                summary: Lawyer registration with firm
                value:
                  email: lawyer@example.com
                  password: SecurePass123!
                  firstName: Maria
                  lastName: Schmidt
                  phone: '+49301234567'
                  userType: LAWYER
                  firmName: Schmidt Legal Associates
              client_registration:
                summary: Client registration
                value:
                  email: client@example.com
                  password: ClientPass456!
                  firstName: John
                  lastName: Doe
                  phone: '+49301234568'
                  userType: CLIENT
      responses:
        '201':
          description: Registration successful - email verification required
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registration successful. Please check your email to verify your account.
                  requiresEmailVerification:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  organization:
                    $ref: '#/components/schemas/Organization'
                    description: Created organization (only for LAWYER type)
              examples:
                lawyer_success:
                  summary: Successful lawyer registration
                  value:
                    success: true
                    message: Registration successful. Please check your email to verify your account.
                    requiresEmailVerification: true
                    user:
                      id: 550e8400-e29b-41d4-a716-446655440000
                      email: lawyer@example.com
                      firstName: Maria
                      lastName: Schmidt
                      isEmailVerified: false
                    organization:
                      id: 660e8400-e29b-41d4-a716-446655440001
                      name: Schmidt Legal Associates
                      plan: FREE
        '400':
          description: Validation error or password requirements not met
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                weak_password:
                  summary: Password requirements not met
                  value:
                    error: VALIDATION_ERROR
                    message: Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character
                    field: password
                    validationRules:
                      - password complexity requirements not met
                invalid_email:
                  summary: Invalid email format
                  value:
                    error: VALIDATION_ERROR
                    message: Invalid email format
                    field: email
                    value: invalid-email
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: EMAIL_ALREADY_EXISTS
                message: An account with this email address already exists
                timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      description: |
        Retrieve detailed information about the currently authenticated user including:
        - Basic profile information (name, email, phone)
        - Account status and verification state
        - Role and permission information
        - Organization memberships
        - Profile completion status

        **Authentication Required**: JWT Bearer token
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
              examples:
                lawyer_profile:
                  summary: Lawyer user profile
                  value:
                    success: true
                    data:
                      id: 550e8400-e29b-41d4-a716-446655440000
                      email: lawyer@example.com
                      firstName: Maria
                      lastName: Schmidt
                      phone: '+49301234567'
                      isAdmin: false
                      isEmailVerified: true
                      locale: de-DE
                      timezone: Europe/Berlin
                      lastLoginAt: '2024-08-16T14:30:00Z'
                      createdAt: '2024-01-15T10:00:00Z'
                client_profile:
                  summary: Client user profile
                  value:
                    success: true
                    data:
                      id: 660e8400-e29b-41d4-a716-446655440001
                      email: client@example.com
                      firstName: John
                      lastName: Doe
                      phone: '+49301234568'
                      isAdmin: false
                      isEmailVerified: true
                      locale: en-US
                      timezone: Europe/Berlin
                      lastLoginAt: '2024-08-16T13:45:00Z'
                      createdAt: '2024-02-20T09:15:00Z'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: |
        Invalidate the current user session. Since JWT tokens are stateless, this endpoint 
        primarily serves as a logout confirmation. Clients should discard the JWT token 
        after calling this endpoint.

        **Note**: In a production environment with JWT blacklisting, this would add 
        the token to a blacklist to prevent further use.

        **Authentication Required**: JWT Bearer token (optional)
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful - client should discard JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Logged out successfully
                  timestamp:
                    type: string
                    format: date-time
                    example: '2024-08-16T14:30:00Z'
              examples:
                successful_logout:
                  summary: Successful logout response
                  value:
                    success: true
                    message: Logged out successfully
                    timestamp: '2024-08-16T14:30:00Z'
  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh JWT token
      description: |
        Generate a new JWT access token using the current token. This endpoint extends 
        the user's session without requiring re-authentication.

        **Use Cases**:
        - Extend user session before token expiry
        - Implement sliding session windows
        - Refresh tokens for long-running applications

        **Headers**:
        - `X-App-Context`: Optional context header for app-specific tokens

        **Authentication Required**: Valid JWT Bearer token
      operationId: refreshToken
      security:
        - bearerAuth: []
      parameters:
        - name: X-App-Context
          in: header
          description: Application context for token generation
          schema:
            type: string
            enum:
              - admin
              - jurono
              - jurolib
            default: jurono
          example: jurono
      responses:
        '200':
          description: New token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: New JWT access token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  refreshToken:
                    type: string
                    description: New refresh token
                    example: rt_9876543210fedcba
                  expiresIn:
                    type: integer
                    description: Token expiration time in seconds
                    example: 3600
                  tokenType:
                    type: string
                    example: Bearer
              examples:
                successful_refresh:
                  summary: Successful token refresh
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    refreshToken: rt_9876543210fedcba
                    expiresIn: 3600
                    tokenType: Bearer
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                expired_token:
                  summary: Token has expired
                  value:
                    error: TOKEN_EXPIRED
                    message: JWT token has expired. Please login again.
                    timestamp: '2024-08-16T14:30:00Z'
                invalid_token:
                  summary: Invalid token format
                  value:
                    error: INVALID_TOKEN
                    message: Invalid or malformed JWT token.
                    timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/sso:
    post:
      tags:
        - Authentication
      summary: Single Sign-On token exchange
      description: |
        Exchange an SSO (Single Sign-On) token from another Jurono application 
        for application-specific JWT tokens. This enables seamless authentication 
        across the Jurono platform ecosystem.

        **SSO Flow**:
        1. User authenticates in primary Jurono application
        2. Primary app generates SSO token
        3. User navigates to this application with SSO token
        4. This endpoint exchanges SSO token for local JWT tokens

        **Security**: SSO tokens are single-use and have short expiration times

        **Status**: Currently not implemented - returns 501 Not Implemented
      operationId: exchangeSSOToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sso_token
              properties:
                sso_token:
                  type: string
                  description: SSO token from originating Jurono application
                  example: sso_eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                target_app:
                  type: string
                  enum:
                    - jurono
                    - jurolib
                    - admin
                  description: Target application context
                  example: jurono
            examples:
              sso_exchange:
                summary: SSO token exchange request
                value:
                  sso_token: sso_eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  target_app: jurono
      responses:
        '200':
          description: SSO token exchange successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                successful_sso:
                  summary: Successful SSO exchange
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    refreshToken: rt_abcdef1234567890
                    user:
                      id: 550e8400-e29b-41d4-a716-446655440000
                      email: user@example.com
                      firstName: John
                      lastName: Doe
                      isEmailVerified: true
                    expiresIn: 3600
        '400':
          description: Missing or invalid SSO token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: INVALID_REQUEST
                message: SSO token is required
                timestamp: '2024-08-16T14:30:00Z'
        '401':
          description: Invalid, expired, or already used SSO token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_sso_token:
                  summary: Invalid SSO token
                  value:
                    error: INVALID_SSO_TOKEN
                    message: SSO token is invalid or has expired
                    timestamp: '2024-08-16T14:30:00Z'
                used_sso_token:
                  summary: Already used SSO token
                  value:
                    error: SSO_TOKEN_ALREADY_USED
                    message: SSO token has already been used
                    timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          description: SSO functionality not yet implemented
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: NOT_IMPLEMENTED
                message: SSO token exchange is not yet implemented
                timestamp: '2024-08-16T14:30:00Z'
  /api/auth/invite:
    post:
      tags:
        - Authentication
      summary: Send organization invitation
      description: |
        Send an email invitation for a user to join an organization with a specific role.
        Only organization owners and admins can send invitations.

        **Invitation Process**:
        1. Validate sender has permission to invite users
        2. Check if user already exists or has pending invitation
        3. Generate secure invitation token with 7-day expiration
        4. Send invitation email with acceptance link
        5. Create pending membership record

        **Auto-detection**: If organizationId is not provided, uses sender's primary organization

        **Email Integration**: Currently creates invitation record but email sending is disabled
      operationId: sendInvitation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipInvite'
            examples:
              lawyer_invitation:
                summary: Invite a lawyer to join firm
                value:
                  email: newlawyer@example.com
                  role: LAWYER
                  organizationId: 123e4567-e89b-12d3-a456-426614174000
                  message: Welcome to Schmidt & Partners! We're excited to have you join our team.
              client_invitation:
                summary: Invite a client for case collaboration
                value:
                  email: client@example.com
                  role: CLIENT
                  message: You've been invited to collaborate on your legal case through our secure platform.
              staff_invitation:
                summary: Invite support staff member
                value:
                  email: assistant@example.com
                  role: SECRETARY
                  message: Join our administrative team!
      responses:
        '201':
          description: Invitation sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Invitation sent successfully
                  data:
                    type: object
                    properties:
                      invitationId:
                        type: string
                        format: uuid
                        description: Unique invitation identifier
                      email:
                        type: string
                        format: email
                        description: Email address invited
                      role:
                        type: string
                        description: Role assigned in invitation
                      expiresAt:
                        type: string
                        format: date-time
                        description: Invitation expiration timestamp
              examples:
                successful_invitation:
                  summary: Successful invitation response
                  value:
                    success: true
                    message: Invitation sent successfully
                    data:
                      invitationId: 550e8400-e29b-41d4-a716-446655440000
                      email: newlawyer@example.com
                      role: LAWYER
                      expiresAt: '2024-08-23T14:30:00Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          description: Insufficient permissions to send invitations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: INSUFFICIENT_PERMISSIONS
                message: You do not have permission to invite users to this organization
                timestamp: '2024-08-16T14:30:00Z'
        '409':
          description: User already exists or invitation pending
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                user_already_member:
                  summary: User is already organization member
                  value:
                    error: USER_ALREADY_MEMBER
                    message: User is already a member of this organization
                    timestamp: '2024-08-16T14:30:00Z'
                invitation_pending:
                  summary: Invitation already sent
                  value:
                    error: INVITATION_PENDING
                    message: An invitation is already pending for this email address
                    timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/invite/{token}:
    get:
      tags:
        - Authentication
      summary: Validate invitation token
      description: |
        Validate an invitation token and return detailed invitation information.
        This endpoint is typically called when a user clicks an invitation link
        to verify the invitation is valid before showing the acceptance form.

        **Token Validation**:
        - Checks token exists and matches format
        - Verifies invitation hasn't expired (7-day limit)
        - Confirms invitation status is still PENDING
        - Returns organization and role details

        **Use Case**: Pre-populate invitation acceptance form with organization details
      operationId: validateInvitationToken
      parameters:
        - name: token
          in: path
          required: true
          description: Secure invitation token received via email
          schema:
            type: string
            pattern: ^[a-f0-9]{64}$
            example: abc123def456789012345678901234567890123456789012345678901234567890
      responses:
        '200':
          description: Valid invitation found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      valid:
                        type: boolean
                        example: true
                      invitation:
                        type: object
                        properties:
                          email:
                            type: string
                            format: email
                            description: Email address that was invited
                          role:
                            type: string
                            enum:
                              - OWNER
                              - ADMIN
                              - LAWYER
                              - STAFF
                              - ACCOUNTANT
                              - PARALEGAL
                              - SECRETARY
                              - INTERN
                              - CLIENT
                            description: Role being offered
                          organizationName:
                            type: string
                            description: Name of the inviting organization
                          organizationDescription:
                            type: string
                            nullable: true
                            description: Organization description
                          message:
                            type: string
                            nullable: true
                            description: Personal message from inviter
                          expiresAt:
                            type: string
                            format: date-time
                            description: When invitation expires
              examples:
                valid_lawyer_invitation:
                  summary: Valid lawyer invitation
                  value:
                    success: true
                    data:
                      valid: true
                      invitation:
                        email: newlawyer@example.com
                        role: LAWYER
                        organizationName: Schmidt & Partners
                        organizationDescription: Leading corporate law firm in Berlin
                        message: Welcome to our team! We're excited to have you join us.
                        expiresAt: '2024-08-23T14:30:00Z'
                valid_client_invitation:
                  summary: Valid client invitation
                  value:
                    success: true
                    data:
                      valid: true
                      invitation:
                        email: client@example.com
                        role: CLIENT
                        organizationName: Schmidt & Partners
                        organizationDescription: Leading corporate law firm in Berlin
                        message: You've been invited to collaborate on your legal case.
                        expiresAt: '2024-08-23T14:30:00Z'
        '400':
          description: Invalid, expired, or already used invitation token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_token:
                  summary: Invalid token format
                  value:
                    error: INVALID_INVITATION
                    message: Invalid or expired invitation token
                    timestamp: '2024-08-16T14:30:00Z'
                expired_invitation:
                  summary: Expired invitation
                  value:
                    error: INVITATION_EXPIRED
                    message: This invitation has expired. Please request a new invitation.
                    timestamp: '2024-08-16T14:30:00Z'
                used_invitation:
                  summary: Already accepted invitation
                  value:
                    error: INVITATION_ALREADY_USED
                    message: This invitation has already been accepted
                    timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/accept-invitation:
    post:
      tags:
        - Authentication
      summary: Accept invitation and complete registration
      description: |
        Accept an organization invitation and complete user account creation or activation.
        This endpoint handles two scenarios:

        **New User**: Creates account and activates membership
        - Validates invitation token and user details
        - Creates new user account with provided information
        - Activates organization membership with assigned role
        - Auto-verifies email (invited users are pre-verified)

        **Existing User**: Activates membership only
        - Links existing user account to organization
        - Activates membership with assigned role
        - Preserves existing user profile data

        **Password Requirements**: Same as registration (8+ chars, mixed case, number, special char)
      operationId: acceptInvitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
                - firstName
                - lastName
              properties:
                token:
                  type: string
                  description: Invitation token received via email
                  pattern: ^[a-f0-9]{64}$
                  example: abc123def456789012345678901234567890123456789012345678901234567890
                password:
                  type: string
                  minLength: 8
                  pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]
                  description: Password meeting security requirements
                  example: SecurePass123!
                firstName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: User first name
                  example: Maria
                lastName:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: User last name
                  example: Schmidt
                phone:
                  type: string
                  pattern: ^\\+?[1-9]\\d{1,14}$
                  description: Optional phone number in international format
                  example: '+49301234567'
            examples:
              new_lawyer_acceptance:
                summary: New lawyer accepting invitation
                value:
                  token: abc123def456789012345678901234567890123456789012345678901234567890
                  password: LawyerPass123!
                  firstName: Maria
                  lastName: Schmidt
                  phone: '+49301234567'
              client_acceptance:
                summary: Client accepting case collaboration invitation
                value:
                  token: def789abc012345678901234567890123456789012345678901234567890123456
                  password: ClientSecure456!
                  firstName: John
                  lastName: Doe
                  phone: '+49301234568'
      responses:
        '201':
          description: Invitation accepted successfully and account created/activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Invitation accepted and account created successfully
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      membership:
                        type: object
                        properties:
                          role:
                            type: string
                            enum:
                              - OWNER
                              - ADMIN
                              - LAWYER
                              - STAFF
                              - ACCOUNTANT
                              - PARALEGAL
                              - SECRETARY
                              - INTERN
                              - CLIENT
                          organizationId:
                            type: string
                            format: uuid
                          status:
                            type: string
                            enum:
                              - ACTIVE
                          joinedAt:
                            type: string
                            format: date-time
              examples:
                new_user_created:
                  summary: New user account created
                  value:
                    success: true
                    message: Invitation accepted and account created successfully
                    data:
                      user:
                        id: 550e8400-e29b-41d4-a716-446655440000
                        email: maria.schmidt@lawfirm.com
                        firstName: Maria
                        lastName: Schmidt
                        phone: '+49301234567'
                        isEmailVerified: true
                        isAdmin: false
                      membership:
                        role: LAWYER
                        organizationId: 123e4567-e89b-12d3-a456-426614174000
                        status: ACTIVE
                        joinedAt: '2024-08-16T14:30:00Z'
                existing_user_activated:
                  summary: Existing user membership activated
                  value:
                    success: true
                    message: Invitation accepted successfully
                    data:
                      user:
                        id: 660e8400-e29b-41d4-a716-446655440001
                        email: john.doe@example.com
                        firstName: John
                        lastName: Doe
                        isEmailVerified: true
                        isAdmin: false
                      membership:
                        role: CLIENT
                        organizationId: 123e4567-e89b-12d3-a456-426614174000
                        status: ACTIVE
                        joinedAt: '2024-08-16T14:30:00Z'
        '400':
          description: Invalid input, expired invitation, or validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              examples:
                invalid_invitation:
                  summary: Invalid or expired invitation token
                  value:
                    error: INVALID_INVITATION
                    message: Invalid or expired invitation token
                    timestamp: '2024-08-16T14:30:00Z'
                weak_password:
                  summary: Password requirements not met
                  value:
                    error: VALIDATION_ERROR
                    message: Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character
                    field: password
                    validationRules:
                      - password complexity requirements not met
                missing_fields:
                  summary: Required fields missing
                  value:
                    error: VALIDATION_ERROR
                    message: firstName is required
                    field: firstName
                    validationRules:
                      - required field missing
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/profile:
    put:
      tags:
        - Authentication
      summary: Update user profile
      description: Update the current user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                preferredLanguage:
                  type: string
                timezone:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid request data
        '401':
          description: Not authenticated
  /api/auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change user password
      description: Change the current user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - currentPassword
                - newPassword
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid current password or validation error
        '401':
          description: Not authenticated
  /api/billing/metrics:
    get:
      tags:
        - Billing Analytics
      summary: Get comprehensive financial metrics
      description: Get revenue, subscription, and customer metrics from Stripe
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            enum:
              - 7d
              - 30d
              - 90d
              - 1y
            default: 30d
          description: Time period for metrics calculation
      responses:
        '200':
          description: Financial metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalRevenue:
                    type: number
                    description: Total revenue in the period
                  monthlyRevenue:
                    type: number
                    description: Projected monthly revenue
                  yearlyRevenue:
                    type: number
                    description: Projected yearly revenue
                  monthlyRecurringRevenue:
                    type: number
                    description: Monthly Recurring Revenue (MRR)
                  totalSubscriptions:
                    type: number
                    description: Total number of subscriptions
                  activeSubscriptions:
                    type: number
                    description: Active subscriptions count
                  churnRate:
                    type: number
                    description: Churn rate percentage
                  currency:
                    type: string
                    description: Currency code
        '401':
          description: Unauthorized - Admin access required
        '500':
          description: Internal server error
  /api/billing/revenue-chart:
    get:
      tags:
        - Billing Analytics
      summary: Get revenue data for charts
      description: Get daily revenue breakdown for visualization
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            enum:
              - 7d
              - 30d
              - 90d
              - 1y
            default: 30d
          description: Time period for revenue data
      responses:
        '200':
          description: Revenue chart data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  timeframe:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                        revenue:
                          type: number
                        subscriptionRevenue:
                          type: number
                        oneTimeRevenue:
                          type: number
                        netRevenue:
                          type: number
  /api/billing/customers:
    get:
      tags:
        - Billing Analytics
      summary: Get customer analytics
      description: Get customer growth and behavior metrics
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            enum:
              - 7d
              - 30d
              - 90d
              - 1y
            default: 30d
          description: Time period for customer metrics
      responses:
        '200':
          description: Customer metrics retrieved successfully
  /api/billing/payment-methods:
    get:
      tags:
        - Billing Analytics
      summary: Get payment method distribution
      description: Get breakdown of payment methods used by customers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Payment method stats retrieved successfully
  /api/billing/dashboard:
    get:
      tags:
        - Billing Analytics
      summary: Get comprehensive billing dashboard data
      description: Get all billing metrics in a single API call for dashboard
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: timeframe
          schema:
            type: string
            enum:
              - 7d
              - 30d
              - 90d
              - 1y
            default: 30d
          description: Time period for dashboard data
      responses:
        '200':
          description: Dashboard data retrieved successfully
  /api/billing/health:
    get:
      tags:
        - Billing Analytics
      summary: Check Stripe integration health
      description: Verify Stripe API connectivity and configuration
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Stripe integration health status
  /api/blog/posts:
    get:
      tags:
        - Blog
      summary: Get published blog posts
      description: Retrieve a paginated list of published blog posts with optional filtering
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of posts per page
        - in: query
          name: categoryId
          schema:
            type: string
            format: uuid
          description: Filter by category ID
        - in: query
          name: tagId
          schema:
            type: string
            format: uuid
          description: Filter by tag ID
        - in: query
          name: authorId
          schema:
            type: string
            format: uuid
          description: Filter by author ID
        - in: query
          name: search
          schema:
            type: string
            maxLength: 200
          description: Search in title, content, and excerpt
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - createdAt
              - updatedAt
              - publishedAt
              - title
            default: createdAt
          description: Sort field
        - in: query
          name: sortOrder
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
          description: Sort order
      responses:
        '200':
          description: List of blog posts
        '400':
          description: Invalid query parameters
        '500':
          description: Internal server error
  /api/blog/posts/{slug}:
    get:
      tags:
        - Blog
      summary: Get blog post by slug
      description: Retrieve a specific published blog post by its slug
      parameters:
        - in: path
          name: slug
          required: true
          schema:
            type: string
            pattern: ^[a-z0-9-]+$
          description: Blog post slug
      responses:
        '200':
          description: Blog post details
        '400':
          description: Invalid slug format
        '404':
          description: Blog post not found
        '500':
          description: Internal server error
  /api/blog/categories:
    get:
      tags:
        - Blog
      summary: Get blog categories
      description: Retrieve a paginated list of blog categories
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of categories per page
      responses:
        '200':
          description: List of blog categories
        '400':
          description: Invalid query parameters
        '500':
          description: Internal server error
  /api/blog/tags:
    get:
      tags:
        - Blog
      summary: Get blog tags
      description: Retrieve a paginated list of blog tags
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
          description: Number of tags per page
      responses:
        '200':
          description: List of blog tags
        '400':
          description: Invalid query parameters
        '500':
          description: Internal server error
  /api/blog/rss:
    get:
      tags:
        - Blog
      summary: Get RSS feed
      description: Generate RSS feed for published blog posts
      responses:
        '200':
          description: RSS feed XML
          content:
            application/rss+xml:
              schema:
                type: string
        '500':
          description: Internal server error
  /api/client-profiles:
    get:
      tags:
        - Client Profiles
      summary: Search client profiles
      description: Search and filter client profiles (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search in name, city, occupation
        - name: city
          in: query
          schema:
            type: string
          description: Filter by city
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of client profiles
    post:
      tags:
        - Client Profiles
      summary: Create client profile
      description: Create a new client profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  format: uuid
                address:
                  type: string
                city:
                  type: string
                postalCode:
                  type: string
                country:
                  type: string
                  minLength: 2
                  maxLength: 2
      responses:
        '201':
          description: Client profile created successfully
  /api/client-profiles/{id}:
    get:
      tags:
        - Client Profiles
      summary: Get client profile by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Client profile details
        '404':
          description: Profile not found
    put:
      tags:
        - Client Profiles
      summary: Update client profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Profile updated successfully
        '404':
          description: Profile not found
    delete:
      tags:
        - Client Profiles
      summary: Delete client profile (soft delete)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Profile deleted successfully
        '404':
          description: Profile not found
  /api/client-profiles/{id}/privacy:
    put:
      tags:
        - Client Profiles
      summary: Update privacy settings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                profileVisibility:
                  type: string
                  enum:
                    - PUBLIC
                    - PRIVATE
                    - MEMBERS_ONLY
                emailNotifications:
                  type: boolean
                smsNotifications:
                  type: boolean
                marketingConsent:
                  type: boolean
                shareContactInfo:
                  type: boolean
      responses:
        '200':
          description: Privacy settings updated successfully
  /api/clients:
    get:
      tags:
        - Clients
      summary: List clients for law firm
      description: Get list of clients for the authenticated user's organization with search, filtering, and pagination
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search in client names, email, company
          schema:
            type: string
        - name: type
          in: query
          description: Filter by client type
          schema:
            type: string
            enum:
              - INDIVIDUAL
              - COMPANY
              - ORGANIZATION
        - name: isActive
          in: query
          description: Filter by active status (where deletedAt IS NULL)
          schema:
            type: boolean
            default: true
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 25
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            enum:
              - firstName
              - lastName
              - email
              - createdAt
              - updatedAt
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        '200':
          description: List of clients with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User not associated with organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Clients
      summary: Create new client
      description: Create a new client for the authenticated user's law firm
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - type
              properties:
                type:
                  type: string
                  enum:
                    - INDIVIDUAL
                    - COMPANY
                    - ORGANIZATION
                  default: INDIVIDUAL
                title:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                companyName:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                street:
                  type: string
                city:
                  type: string
                postalCode:
                  type: string
                country:
                  type: string
                  default: DE
                dateOfBirth:
                  type: string
                  format: date
                nationality:
                  type: string
                occupation:
                  type: string
                notes:
                  type: string
                preferredLanguage:
                  type: string
                  default: de
                communicationPreferences:
                  type: object
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Client with this email already exists in organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/clients/{id}:
    get:
      tags:
        - Clients
      summary: Get specific client by ID
      description: Get detailed client information by ID for the authenticated user's organization
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Client ID
      responses:
        '200':
          description: Client details with related data
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Client'
                  - type: object
                    properties:
                      mandates:
                        type: array
                        items:
                          $ref: '#/components/schemas/Mandate'
                      recentInvoices:
                        type: array
                        items:
                          $ref: '#/components/schemas/Invoice'
        '403':
          description: Access denied - client not in user's organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Clients
      summary: Update existing client
      description: Update client information with partial updates supported
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Client ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - INDIVIDUAL
                    - COMPANY
                    - ORGANIZATION
                title:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                companyName:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
                street:
                  type: string
                city:
                  type: string
                postalCode:
                  type: string
                country:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                nationality:
                  type: string
                occupation:
                  type: string
                notes:
                  type: string
                preferredLanguage:
                  type: string
                communicationPreferences:
                  type: object
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists for another client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Clients
      summary: Soft delete client
      description: Soft delete client by setting deletedAt timestamp (preserves data for compliance)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Client ID
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deletedAt:
                    type: string
                    format: date-time
        '404':
          description: Client not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Cannot delete client with active mandates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/compliance/checks:
    get:
      tags:
        - Compliance
      summary: List compliance checks
      description: Get list of compliance checks for the organization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of compliance checks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComplianceCheck'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Organization access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Compliance
      summary: Create compliance check
      description: Create a new compliance check for the organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - name
                - description
              properties:
                type:
                  type: string
                  enum:
                    - GDPR_DATA_RETENTION
                    - GDPR_RIGHT_TO_ACCESS
                    - GDPR_RIGHT_TO_DELETION
                    - GDPR_CONSENT_MANAGEMENT
                    - DATA_ENCRYPTION
                    - ACCESS_CONTROL
                    - AUDIT_TRAIL
                    - BACKUP_VERIFICATION
                    - CUSTOM
                name:
                  type: string
                description:
                  type: string
                configuration:
                  type: object
      responses:
        '201':
          description: Compliance check created successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Organization access required
  /api/compliance/checks/{id}/run:
    post:
      tags:
        - Compliance
      summary: Run compliance check
      description: Trigger execution of a specific compliance check
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Compliance check ID
      responses:
        '200':
          description: Check started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: Check run ID
                  status:
                    type: string
                    enum:
                      - RUNNING
                  startedAt:
                    type: string
                    format: date-time
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Organization access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Compliance check not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/compliance/exports:
    get:
      tags:
        - Compliance
      summary: List data exports
      description: Get list of data exports for the organization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of data exports
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    type:
                      type: string
                      enum:
                        - USER_DATA
                        - ORGANIZATION_DATA
                        - MANDATE_DATA
                        - CLIENT_DATA
                        - COMPLETE_EXPORT
                        - ANONYMIZED_EXPORT
                    status:
                      type: string
                      enum:
                        - PENDING
                        - PROCESSING
                        - COMPLETED
                        - FAILED
                    createdAt:
                      type: string
                      format: date-time
                    completedAt:
                      type: string
                      format: date-time
                      nullable: true
                    downloadUrl:
                      type: string
                      nullable: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Organization access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Compliance
      summary: Create data export
      description: Request a new data export for the organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  enum:
                    - USER_DATA
                    - ORGANIZATION_DATA
                    - MANDATE_DATA
                    - CLIENT_DATA
                    - COMPLETE_EXPORT
                    - ANONYMIZED_EXPORT
                  description: Type of data export to create
                filters:
                  type: object
                  description: Optional filters for the export
      responses:
        '200':
          description: Export created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  type:
                    type: string
                    enum:
                      - USER_DATA
                      - ORGANIZATION_DATA
                      - MANDATE_DATA
                      - CLIENT_DATA
                      - COMPLETE_EXPORT
                      - ANONYMIZED_EXPORT
                  status:
                    type: string
                    enum:
                      - PENDING
                  createdAt:
                    type: string
                    format: date-time
                  requestedBy:
                    type: string
                    format: uuid
                  filters:
                    type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Organization access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/compliance/anonymizations:
    get:
      tags:
        - Compliance
      summary: List data anonymizations
      description: Get list of data anonymizations for the organization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of data anonymizations
    post:
      tags:
        - Compliance
      summary: Create data anonymization
      description: Request a new data anonymization for the organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - targetEntities
              properties:
                type:
                  type: string
                  enum:
                    - FULL_ANONYMIZATION
                    - PSEUDONYMIZATION
                    - SELECTIVE_ANONYMIZATION
                targetEntities:
                  type: array
                  items:
                    type: string
                rules:
                  type: object
      responses:
        '201':
          description: Anonymization created successfully
  /api/compliance/reports:
    get:
      tags:
        - Compliance
      summary: List compliance reports
      description: Get list of compliance reports for the organization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of compliance reports
    post:
      tags:
        - Compliance
      summary: Create compliance report
      description: Generate a new compliance report for the organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - period
              properties:
                type:
                  type: string
                period:
                  type: string
      responses:
        '201':
          description: Report created successfully
  /api/compliance/metrics:
    get:
      tags:
        - Compliance
      summary: Get compliance metrics
      description: Get compliance overview metrics for the organization
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Compliance metrics
  /api/documentation:
    get:
      summary: Get API documentation metadata
      description: Returns information about available API documentation files
      tags:
        - Documentation
      responses:
        '200':
          description: Documentation metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  generatedAt:
                    type: string
                    format: date-time
                  version:
                    type: string
                  title:
                    type: string
                  endpoints:
                    type: object
                    properties:
                      public:
                        type: integer
                      complete:
                        type: integer
                      admin:
                        type: integer
                  files:
                    type: object
                    additionalProperties:
                      type: string
        '404':
          description: Documentation not available
  /api/documentation/openapi-public.json:
    get:
      summary: Download public API specification (JSON)
      description: Downloads the OpenAPI specification for public endpoints in JSON format
      tags:
        - Documentation
      responses:
        '200':
          description: OpenAPI specification
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Documentation file not found
  /api/documentation/openapi-public.yaml:
    get:
      summary: Download public API specification (YAML)
      description: Downloads the OpenAPI specification for public endpoints in YAML format
      tags:
        - Documentation
      responses:
        '200':
          description: OpenAPI specification
          content:
            text/yaml:
              schema:
                type: string
        '404':
          description: Documentation file not found
  /api/documentation/openapi-complete.json:
    get:
      summary: Download complete API specification (JSON)
      description: Downloads the complete OpenAPI specification including admin endpoints in JSON format
      tags:
        - Documentation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Complete OpenAPI specification
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Documentation file not found
  /api/documentation/openapi-complete.yaml:
    get:
      summary: Download complete API specification (YAML)
      description: Downloads the complete OpenAPI specification including admin endpoints in YAML format
      tags:
        - Documentation
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Complete OpenAPI specification
          content:
            text/yaml:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Documentation file not found
  /api/jurolib/auth/register:
    post:
      tags:
        - JuroLib
      summary: Register new JuroLib user
      description: |
        Register a new user account for the JuroLib lawyer directory platform.
        Supports both client and lawyer registrations with automatic profile creation.

        **Account Types**:
        - `CLIENT`: Creates client profile for finding and contacting lawyers
        - `LAWYER`: Creates lawyer account (profile claiming required separately)

        **Email Verification**: All accounts require email verification before full access

        **Profile Creation**: Automatically creates appropriate profile based on role
      operationId: registerJuroLibUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  description: User password
                  example: SecurePass123!
                firstName:
                  type: string
                  description: User first name
                  example: Maria
                lastName:
                  type: string
                  description: User last name
                  example: Schmidt
                phone:
                  type: string
                  description: Optional phone number
                  example: '+49301234567'
                role:
                  type: string
                  enum:
                    - CLIENT
                    - LAWYER
                  default: CLIENT
                  description: User role in JuroLib
            examples:
              client_registration:
                summary: Client registration
                value:
                  email: client@example.com
                  password: ClientPass123!
                  firstName: John
                  lastName: Doe
                  phone: '+49301234567'
                  role: CLIENT
              lawyer_registration:
                summary: Lawyer registration
                value:
                  email: lawyer@example.com
                  password: LawyerPass123!
                  firstName: Maria
                  lastName: Schmidt
                  phone: '+49301234568'
                  role: LAWYER
      responses:
        '201':
          description: Registration successful - email verification required
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          email:
                            type: string
                          firstName:
                            type: string
                          lastName:
                            type: string
                          role:
                            type: string
                          emailVerified:
                            type: boolean
                            example: false
                      token:
                        type: string
                        description: JWT access token
                      refreshToken:
                        type: string
                        description: Refresh token
                      expiresIn:
                        type: integer
                        description: Token expiration in seconds
                      message:
                        type: string
                        example: Registration successful. Please check your email for verification.
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: USER_EXISTS
                message: User already exists
                timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/jurolib/lawyers:
    get:
      tags:
        - JuroLib
      summary: Search lawyer directory
      description: |
        Search and filter lawyers in the JuroLib directory with comprehensive filtering options.
        Supports location-based search, practice area filtering, language preferences, and more.

        **Search Features**:
        - Location search by city name or postal code
        - Practice area specialization filtering
        - Language requirements
        - Rating and verification filters
        - Availability status

        **Sorting Options**:
        - Rating (default)
        - Name alphabetical
        - City alphabetical
        - Creation date

        **Rate Limiting**: 120 requests per minute per IP
      operationId: searchLawyers
      security:
        - bearerAuth: []
      parameters:
        - name: location
          in: query
          description: City name or postal code
          schema:
            type: string
          example: Berlin
        - name: practiceArea
          in: query
          description: Legal practice area specialization
          schema:
            type: string
            enum:
              - FAMILY_LAW
              - LABOR_LAW
              - CRIMINAL_LAW
              - CIVIL_LAW
              - REAL_ESTATE_LAW
              - TRAFFIC_LAW
              - INSURANCE_LAW
              - TAX_LAW
          example: FAMILY_LAW
        - name: language
          in: query
          description: Required language
          schema:
            type: string
          example: English
        - name: preferredLanguage
          in: query
          description: Preferred language for prioritization
          schema:
            type: string
          example: German
        - name: search
          in: query
          description: General search term (name, firm, city)
          schema:
            type: string
          example: Schmidt
        - name: country
          in: query
          description: Country code
          schema:
            type: string
            default: DE
          example: DE
        - name: rating
          in: query
          description: Minimum average rating
          schema:
            type: number
            minimum: 1
            maximum: 5
          example: 4
        - name: acceptsNewClients
          in: query
          description: Filter by availability for new clients
          schema:
            type: boolean
          example: true
        - name: isVerified
          in: query
          description: Filter by verification status
          schema:
            type: boolean
          example: true
        - name: isFachanwalt
          in: query
          description: Filter by Fachanwalt certification
          schema:
            type: boolean
          example: true
        - name: firmSize
          in: query
          description: Filter by law firm size
          schema:
            type: string
            enum:
              - SOLO
              - SMALL_2_10
              - MEDIUM_11_50
              - LARGE_51_PLUS
          example: SOLO
        - name: responseTime
          in: query
          description: Filter by maximum response time
          schema:
            type: string
            enum:
              - WITHIN_1_HOUR
              - WITHIN_4_HOURS
              - WITHIN_24_HOURS
              - WITHIN_48_HOURS
              - WITHIN_WEEK
          example: WITHIN_24_HOURS
        - name: consultationType
          in: query
          description: Filter by supported consultation type
          schema:
            type: string
            enum:
              - IN_PERSON
              - VIDEO_CALL
              - PHONE_CALL
              - EMAIL_ONLY
          example: VIDEO_CALL
        - name: yearsExperience
          in: query
          description: Minimum years of experience in practice area
          schema:
            type: integer
            minimum: 0
          example: 5
        - name: hourlyRateMin
          in: query
          description: Minimum hourly rate in EUR
          schema:
            type: number
          example: 100
        - name: hourlyRateMax
          in: query
          description: Maximum hourly rate in EUR
          schema:
            type: number
          example: 500
        - name: hasReviews
          in: query
          description: Filter lawyers with at least one review
          schema:
            type: boolean
          example: true
        - name: languages
          in: query
          description: Required languages (comma-separated)
          schema:
            type: string
          example: German,English
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum:
              - rating
              - name
              - city
              - createdAt
            default: rating
        - name: sortOrder
          in: query
          description: Sort direction
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        '200':
          description: Lawyer search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LawyerSearchResponse'
              examples:
                berlin_family_lawyers:
                  summary: Family lawyers in Berlin
                  value:
                    success: true
                    data:
                      lawyers:
                        - id: 550e8400-e29b-41d4-a716-446655440000
                          firstName: Dr. Maria
                          lastName: Schmidt
                          title: Rechtsanwältin
                          city: Berlin
                          country: Germany
                          practiceAreas:
                            - practiceArea: FAMILY_LAW
                              yearsExperience: 15
                              isFachanwalt: true
                          averageRating: 4.8
                          totalReviews: 127
                          isVerified: true
                          acceptsNewClients: true
                          languages:
                            - German
                            - English
                      pagination:
                        currentPage: 1
                        totalPages: 5
                        pageSize: 20
                        totalItems: 95
                        hasNextPage: true
                        hasPreviousPage: false
                      totalCount: 95
                      searchTime: 45.6
        '400':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/jurolib/lawyers/{id}:
    get:
      tags:
        - JuroLib
      summary: Get detailed lawyer profile
      description: |
        Retrieve comprehensive information about a specific lawyer including:
        - Complete profile information and contact details
        - Practice areas and specializations
        - Reviews and ratings
        - Recent articles and publications
        - Availability and consultation information

        **Analytics**: Increments profile view count for unique visitors

        **Privacy**: Email addresses are hidden if placeholder/invalid
      operationId: getLawyerProfile
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Lawyer profile ID
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Detailed lawyer profile information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/LawyerProfile'
              examples:
                detailed_lawyer_profile:
                  summary: Complete lawyer profile
                  value:
                    success: true
                    data:
                      id: 550e8400-e29b-41d4-a716-446655440000
                      firstName: Dr. Maria
                      lastName: Schmidt
                      title: Rechtsanwältin
                      profileImageUrl: https://example.com/images/lawyer-1.jpg
                      street: Unter den Linden
                      streetNumber: '42'
                      postalCode: '10117'
                      city: Berlin
                      state: Berlin
                      country: Germany
                      phone: +49 30 12345678
                      website: https://schmidt-law.de
                      email: contact@schmidt-law.de
                      barNumber: '12345'
                      admissionYear: 2005
                      university: Humboldt-Universität zu Berlin
                      languages:
                        - German
                        - English
                        - French
                      practiceAreas:
                        - practiceArea: FAMILY_LAW
                          yearsExperience: 15
                          isFachanwalt: true
                      averageRating: 4.8
                      totalReviews: 127
                      isVerified: true
                      acceptsNewClients: true
                      reviews:
                        - id: rev-001
                          rating: 5
                          title: Excellent family law representation
                          comment: Dr. Schmidt provided exceptional guidance...
                          practiceArea: FAMILY_LAW
                          createdAt: '2024-08-01T10:30:00Z'
                      articles:
                        - id: art-001
                          title: Understanding German Family Law
                          excerpt: A comprehensive guide to...
                          publishedAt: '2024-08-01T09:00:00Z'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/jurolib/lawyers/{id}/inquiries:
    post:
      tags:
        - JuroLib
      summary: Send inquiry to lawyer
      description: |
        Send a legal inquiry to a specific lawyer. This creates a new inquiry record
        and notifies the lawyer via email if they have notifications enabled.

        **Rate Limiting**: 5 inquiries per 5 minutes per IP address

        **Lawyer Requirements**:
        - Must be accepting new clients
        - Must not be in vacation mode
        - Must not have exceeded monthly inquiry limit

        **Notifications**:
        - Lawyer receives email notification if valid email on file
        - Auto-response sent to client if lawyer has it enabled

        **Inquiry Tracking**: Updates lawyer's monthly inquiry count
      operationId: sendLawyerInquiry
      parameters:
        - name: id
          in: path
          required: true
          description: Lawyer profile ID
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - clientName
                - clientEmail
                - subject
                - message
              properties:
                clientName:
                  type: string
                  description: Client's full name
                  example: John Doe
                clientEmail:
                  type: string
                  format: email
                  description: Client's email address
                  example: john.doe@example.com
                clientPhone:
                  type: string
                  description: Optional client phone number
                  example: '+49301234567'
                subject:
                  type: string
                  description: Inquiry subject line
                  example: Divorce proceedings consultation
                message:
                  type: string
                  description: Detailed inquiry message
                  example: I need legal advice regarding my divorce proceedings...
                practiceArea:
                  type: string
                  enum:
                    - FAMILY_LAW
                    - LABOR_LAW
                    - CRIMINAL_LAW
                    - CIVIL_LAW
                    - REAL_ESTATE_LAW
                    - TRAFFIC_LAW
                    - INSURANCE_LAW
                    - TAX_LAW
                  description: Relevant practice area
                  example: FAMILY_LAW
                urgency:
                  type: string
                  enum:
                    - LOW
                    - NORMAL
                    - HIGH
                    - URGENT
                  default: NORMAL
                  description: Case urgency level
                budget:
                  type: number
                  description: Estimated budget in EUR
                  example: 5000
                preferredContact:
                  type: string
                  enum:
                    - EMAIL
                    - PHONE
                    - VIDEO_CALL
                  default: EMAIL
                  description: Preferred contact method
            examples:
              family_law_inquiry:
                summary: Family law consultation request
                value:
                  clientName: John Doe
                  clientEmail: john.doe@example.com
                  clientPhone: '+49301234567'
                  subject: Divorce proceedings consultation
                  message: I need legal advice regarding my divorce proceedings. My spouse and I are looking to separate amicably and need guidance on asset division and child custody arrangements.
                  practiceArea: FAMILY_LAW
                  urgency: NORMAL
                  budget: 3000
                  preferredContact: EMAIL
              urgent_legal_matter:
                summary: Urgent legal consultation
                value:
                  clientName: Maria Schmidt
                  clientEmail: maria.schmidt@example.com
                  clientPhone: '+49301234568'
                  subject: Urgent employment termination issue
                  message: I was terminated from my job today and believe it was unlawful. I need immediate legal advice on my rights and next steps.
                  practiceArea: LABOR_LAW
                  urgency: URGENT
                  budget: 2000
                  preferredContact: PHONE
      responses:
        '201':
          description: Inquiry sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      inquiryId:
                        type: string
                        format: uuid
                        description: Unique inquiry identifier
                      message:
                        type: string
                        example: Inquiry sent successfully. The lawyer will respond according to their specified response time.
              examples:
                successful_inquiry:
                  summary: Inquiry sent successfully
                  value:
                    success: true
                    data:
                      inquiryId: 660e8400-e29b-41d4-a716-446655440001
                      message: Inquiry sent successfully. The lawyer will respond according to their specified response time.
        '400':
          description: Invalid input or lawyer not accepting clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_fields:
                  summary: Required fields missing
                  value:
                    error: MISSING_FIELDS
                    message: Missing required fields
                    timestamp: '2024-08-16T14:30:00Z'
                not_accepting_clients:
                  summary: Lawyer not accepting new clients
                  value:
                    error: NOT_ACCEPTING_CLIENTS
                    message: Lawyer is not currently accepting new clients
                    timestamp: '2024-08-16T14:30:00Z'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          description: Rate limit exceeded or inquiry limit reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                rate_limit:
                  summary: Too many inquiries from IP
                  value:
                    error: RATE_LIMIT_EXCEEDED
                    message: Too many inquiries sent. Please try again later.
                    timestamp: '2024-08-16T14:30:00Z'
                inquiry_limit:
                  summary: Lawyer monthly limit reached
                  value:
                    error: INQUIRY_LIMIT_REACHED
                    message: Lawyer has reached monthly inquiry limit
                    timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/jurolib/stats:
    get:
      tags:
        - JuroLib
      summary: Get platform statistics
      description: |
        Retrieve current statistics about the JuroLib lawyer directory platform.
        Provides overview metrics useful for platform analytics and public display.

        **Metrics Included**:
        - Total number of lawyer profiles
        - Number of verified lawyers
        - Geographic coverage (cities)
        - Practice area distribution

        **Public Endpoint**: No authentication required
      operationId: getPlatformStats
      responses:
        '200':
          description: Platform statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      totalLawyers:
                        type: integer
                        description: Total number of lawyer profiles
                        example: 12458
                      verifiedLawyers:
                        type: integer
                        description: Number of verified lawyer profiles
                        example: 8932
                      totalCities:
                        type: integer
                        description: Number of cities with lawyer coverage
                        example: 245
                      practiceAreas:
                        type: array
                        description: Top 10 practice areas by lawyer count
                        items:
                          type: object
                          properties:
                            practiceArea:
                              type: string
                              description: Practice area code
                            _count:
                              type: object
                              properties:
                                practiceArea:
                                  type: integer
                                  description: Number of lawyers in this area
                        example:
                          - practiceArea: FAMILY_LAW
                            _count:
                              practiceArea: 3245
                          - practiceArea: LABOR_LAW
                            _count:
                              practiceArea: 2891
                      lastUpdated:
                        type: string
                        format: date-time
                        description: When statistics were last calculated
                        example: '2024-08-16T14:30:00Z'
              examples:
                platform_statistics:
                  summary: Current platform statistics
                  value:
                    success: true
                    data:
                      totalLawyers: 12458
                      verifiedLawyers: 8932
                      totalCities: 245
                      practiceAreas:
                        - practiceArea: FAMILY_LAW
                          _count:
                            practiceArea: 3245
                        - practiceArea: LABOR_LAW
                          _count:
                            practiceArea: 2891
                        - practiceArea: CIVIL_LAW
                          _count:
                            practiceArea: 2156
                      lastUpdated: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/lawyer-profiles:
    get:
      tags:
        - Lawyer Profiles
      summary: Search lawyer profiles
      description: Search and filter lawyer profiles with pagination
      security:
        - bearerAuth: []
      parameters:
        - name: search
          in: query
          schema:
            type: string
          description: Search in name, firm, biography
        - name: city
          in: query
          schema:
            type: string
          description: Filter by city
        - name: practiceArea
          in: query
          schema:
            type: string
          description: Filter by practice area
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of lawyer profiles
    post:
      tags:
        - Lawyer Profiles
      summary: Create lawyer profile
      description: Create a new lawyer profile (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - city
                - practiceAreas
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                city:
                  type: string
                practiceAreas:
                  type: array
                  items:
                    type: object
                    properties:
                      practiceArea:
                        type: string
                      yearsExperience:
                        type: integer
                      isFachanwalt:
                        type: boolean
      responses:
        '201':
          description: Lawyer profile created successfully
  /api/lawyer-profiles/{id}:
    get:
      tags:
        - Lawyer Profiles
      summary: Get lawyer profile by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lawyer profile details
        '404':
          description: Profile not found
    put:
      tags:
        - Lawyer Profiles
      summary: Update lawyer profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Profile updated successfully
        '404':
          description: Profile not found
    delete:
      tags:
        - Lawyer Profiles
      summary: Delete lawyer profile (soft delete)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Profile deleted successfully
        '404':
          description: Profile not found
  /api/lawyer-profiles/{id}/claim:
    post:
      tags:
        - Lawyer Profiles
      summary: Claim a lawyer profile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Profile claimed successfully
        '400':
          description: Profile not claimable or already claimed
  /api/notifications:
    get:
      tags:
        - Notifications
      summary: Get user notifications
      description: Retrieve notifications for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: unreadOnly
          in: query
          schema:
            type: boolean
            default: false
          description: Get only unread notifications
        - name: category
          in: query
          schema:
            type: string
            enum:
              - system
              - appointments
              - inquiries
              - legal
              - billing
              - marketing
          description: Filter by notification category
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: User notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            type:
                              type: string
                            title:
                              type: string
                            message:
                              type: string
                            read:
                              type: boolean
                            createdAt:
                              type: string
                              format: date-time
                      total:
                        type: integer
                      unreadCount:
                        type: integer
  /api/notifications/{id}/read:
    patch:
      tags:
        - Notifications
      summary: Mark notification as read
      description: Mark a specific notification as read
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification ID
      responses:
        '200':
          description: Notification marked as read
        '404':
          description: Notification not found
  /api/notifications/read-all:
    patch:
      tags:
        - Notifications
      summary: Mark all notifications as read
      description: Mark all notifications as read for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  enum:
                    - system
                    - appointments
                    - inquiries
                    - legal
                    - billing
                    - marketing
                  description: Optional category filter
      responses:
        '200':
          description: All notifications marked as read
  /api/notifications/{id}:
    delete:
      tags:
        - Notifications
      summary: Delete notification
      description: Delete a specific notification
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Notification ID
      responses:
        '200':
          description: Notification deleted successfully
        '404':
          description: Notification not found
  /api/notifications/preferences:
    get:
      tags:
        - Notifications
      summary: Get notification preferences
      description: Get notification preferences for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notification preferences retrieved successfully
    put:
      tags:
        - Notifications
      summary: Update notification preferences
      description: Update notification preferences for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailNotifications:
                  type: boolean
                smsNotifications:
                  type: boolean
                pushNotifications:
                  type: boolean
                inAppNotifications:
                  type: boolean
                categories:
                  type: object
                  properties:
                    system:
                      type: boolean
                    appointments:
                      type: boolean
                    inquiries:
                      type: boolean
                    legal:
                      type: boolean
                    billing:
                      type: boolean
                    marketing:
                      type: boolean
      responses:
        '200':
          description: Preferences updated successfully
  /api/notifications/stats:
    get:
      tags:
        - Notifications
      summary: Get notification statistics
      description: Get notification statistics for the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Notification statistics retrieved successfully
  /api/organizations/invitations:
    get:
      tags:
        - Organizations
      summary: Get organization invitations
      description: |
        Retrieve all invitations for the authenticated user's organization.
        Only organization owners and admins can view invitations.

        **Permission Requirements**:
        - User must be an OWNER or ADMIN of the organization
        - User must have active membership status

        **Invitation Statuses**:
        - `PENDING`: Invitation sent but not yet accepted
        - `ACTIVE`: Invitation accepted and membership active
        - `SUSPENDED`: Membership temporarily suspended
        - `DEACTIVATED`: Membership permanently deactivated
      operationId: getOrganizationInvitations
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter invitations by status
          schema:
            type: string
            enum:
              - PENDING
              - ACTIVE
              - SUSPENDED
              - DEACTIVATED
          example: PENDING
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: List of organization invitations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Membership'
                  pagination:
                    $ref: '#/components/schemas/PaginationInfo'
              examples:
                organization_invitations:
                  summary: Organization invitations list
                  value:
                    success: true
                    data:
                      - id: 550e8400-e29b-41d4-a716-446655440000
                        invitationEmail: newmember@example.com
                        role: LAWYER
                        status: PENDING
                        invitedAt: '2024-08-16T14:30:00Z'
                        invitationExpiresAt: '2024-08-23T14:30:00Z'
                        inviterName: Maria Schmidt
                        notes: Welcome to our law firm!
                      - id: 660e8400-e29b-41d4-a716-446655440001
                        invitationEmail: assistant@example.com
                        role: STAFF
                        status: ACTIVE
                        invitedAt: '2024-08-10T09:15:00Z'
                        acceptedAt: '2024-08-10T14:22:00Z'
                        inviterName: Maria Schmidt
                    pagination:
                      currentPage: 1
                      totalPages: 2
                      pageSize: 20
                      totalItems: 25
                      hasNextPage: true
                      hasPreviousPage: false
        '403':
          description: Insufficient permissions to view invitations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: INSUFFICIENT_PERMISSIONS
                message: You do not have permission to view invitations
                timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/organizations/invitations/{id}:
    delete:
      tags:
        - Organizations
      summary: Cancel invitation
      description: |
        Cancel a pending organization invitation. This permanently removes the invitation
        and the invited user will no longer be able to accept it.

        **Permission Requirements**:
        - User must be an OWNER or ADMIN of the organization
        - Invitation must be in PENDING status
        - Invitation must belong to the user's organization

        **Note**: Only pending invitations can be cancelled. Active memberships 
        should be deactivated using the membership management endpoints.
      operationId: cancelInvitation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Unique invitation identifier
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Invitation cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Invitation cancelled successfully
              examples:
                successful_cancellation:
                  summary: Invitation cancelled
                  value:
                    success: true
                    message: Invitation cancelled successfully
        '403':
          description: Insufficient permissions to cancel invitations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: INSUFFICIENT_PERMISSIONS
                message: You do not have permission to cancel invitations
                timestamp: '2024-08-16T14:30:00Z'
        '404':
          description: Invitation not found or already processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: INVITATION_NOT_FOUND
                message: Invitation not found or already processed
                timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/organizations/invitations/{id}/resend:
    post:
      tags:
        - Organizations
      summary: Resend invitation
      description: |
        Resend a pending invitation with a new expiration date and optional updated message.
        This generates a new invitation token and extends the expiration by 7 days.

        **Permission Requirements**:
        - User must be an OWNER or ADMIN of the organization
        - Invitation must be in PENDING status
        - Invitation must belong to the user's organization

        **Functionality**:
        - Generates new secure invitation token
        - Extends expiration by 7 days from current time
        - Updates invitation timestamp and sender
        - Optionally updates invitation message
        - Sends new invitation email (when email service is enabled)
      operationId: resendInvitation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Unique invitation identifier
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        description: Optional updated invitation message
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  maxLength: 500
                  description: Updated invitation message
                  example: We're excited to have you join our legal team! Please note the updated start date.
            examples:
              updated_message:
                summary: Resend with updated message
                value:
                  message: We're excited to have you join our legal team! Please note the updated start date.
              simple_resend:
                summary: Simple resend without message update
                value: {}
      responses:
        '200':
          description: Invitation resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Invitation resent successfully
                  data:
                    type: object
                    properties:
                      newExpiresAt:
                        type: string
                        format: date-time
                        description: New expiration date
                        example: '2024-08-23T14:30:00Z'
              examples:
                successful_resend:
                  summary: Invitation resent successfully
                  value:
                    success: true
                    message: Invitation resent successfully
                    data:
                      newExpiresAt: '2024-08-23T14:30:00Z'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          description: Insufficient permissions to resend invitations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: INSUFFICIENT_PERMISSIONS
                message: You do not have permission to resend invitations
                timestamp: '2024-08-16T14:30:00Z'
        '404':
          description: Invitation not found or already processed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: INVITATION_NOT_FOUND
                message: Invitation not found or already processed
                timestamp: '2024-08-16T14:30:00Z'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/reports/templates:
    get:
      tags:
        - Reports
      summary: Get available report templates
      description: Retrieve all available report templates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Report templates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      templates:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                            name:
                              type: string
                            description:
                              type: string
                            sections:
                              type: array
                              items:
                                type: object
  /api/reports/generate:
    post:
      tags:
        - Reports
      summary: Generate a report
      description: Generate a report from a template
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  type: string
                  description: Report template ID
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                organizationId:
                  type: string
                  format: uuid
                settings:
                  type: object
                  properties:
                    includeCharts:
                      type: boolean
                    includeMetrics:
                      type: boolean
                    includeTrends:
                      type: boolean
                    exportFormat:
                      type: string
                      enum:
                        - pdf
                        - excel
                        - csv
                        - json
              required:
                - templateId
                - startDate
                - endDate
      responses:
        '200':
          description: Report generated successfully
        '400':
          description: Invalid request parameters
        '404':
          description: Template not found
  /api/reports/{reportId}:
    get:
      tags:
        - Reports
      summary: Get report by ID
      description: Retrieve a generated report by its ID
      security:
        - bearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
          description: Report ID
      responses:
        '200':
          description: Report retrieved successfully
        '404':
          description: Report not found
  /api/reports/download/{reportId}:
    get:
      tags:
        - Reports
      summary: Download report file
      description: Download the generated report file
      security:
        - bearerAuth: []
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
          description: Report ID
      responses:
        '200':
          description: File download
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
        '404':
          description: Report or file not found
  /api/reports/schedule:
    post:
      tags:
        - Reports
      summary: Schedule automated report generation
      description: Schedule a report to be generated automatically
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  type: string
                schedule:
                  type: string
                  description: Cron expression for schedule
                organizationId:
                  type: string
                  format: uuid
                settings:
                  type: object
                name:
                  type: string
                description:
                  type: string
              required:
                - templateId
                - schedule
      responses:
        '200':
          description: Report scheduled successfully
  /api/reports/preview:
    post:
      tags:
        - Reports
      summary: Preview report data
      description: Get a preview of report data without generating the full report
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                templateId:
                  type: string
                startDate:
                  type: string
                  format: date-time
                endDate:
                  type: string
                  format: date-time
                organizationId:
                  type: string
                  format: uuid
              required:
                - templateId
                - startDate
                - endDate
      responses:
        '200':
          description: Report preview generated successfully
  /api/search:
    get:
      tags:
        - Search
      summary: Universal search across all models
      description: Search lawyers, clients, cases, and articles with full-text search
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 200
          description: Search query
        - name: models
          in: query
          schema:
            type: array
            items:
              type: string
              enum:
                - lawyer
                - client
                - case
                - article
          description: Limit search to specific models
        - name: practiceArea
          in: query
          schema:
            type: array
            items:
              type: string
          description: Filter by practice areas
        - name: city
          in: query
          schema:
            type: string
          description: Filter by city
        - name: country
          in: query
          schema:
            type: string
            minLength: 2
            maxLength: 2
          description: Filter by country code
        - name: verified
          in: query
          schema:
            type: boolean
          description: Filter by verification status
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          schema:
            type: string
            enum:
              - relevance
              - date
              - rating
              - name
            default: relevance
        - name: sortOrder
          in: query
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
      responses:
        '200':
          description: Search results with pagination and aggregations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          type: object
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                          limit:
                            type: integer
                          total:
                            type: integer
                          totalPages:
                            type: integer
                      aggregations:
                        type: object
                      suggestions:
                        type: array
                        items:
                          type: string
        '400':
          description: Invalid search parameters
        '429':
          description: Rate limit exceeded
  /api/search/lawyers:
    get:
      tags:
        - Search
      summary: Search lawyers only
      description: Dedicated lawyer search with enhanced filtering
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          description: Search query
        - name: practiceArea
          in: query
          schema:
            type: string
          description: Practice area filter
        - name: city
          in: query
          schema:
            type: string
          description: City filter
        - name: verified
          in: query
          schema:
            type: boolean
          description: Verification status filter
      responses:
        '200':
          description: Lawyer search results
  /api/search/suggestions:
    get:
      tags:
        - Search
      summary: Get search suggestions
      description: Auto-complete suggestions for search queries
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Partial search query
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 10
          description: Maximum number of suggestions
      responses:
        '200':
          description: List of search suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      suggestions:
                        type: array
                        items:
                          type: string
                      query:
                        type: string
  /api/search/articles:
    get:
      tags:
        - Search
      summary: Search articles
      description: Search published legal articles
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          description: Search query
        - name: practiceArea
          in: query
          schema:
            type: string
          description: Practice area filter
      responses:
        '200':
          description: Article search results
  /api/search/reindex:
    post:
      tags:
        - Search
      summary: Rebuild search indices
      description: Rebuild all search indices (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Search indices rebuilt successfully
        '403':
          description: Admin access required
  /api/stats/practice-areas:
    get:
      tags:
        - Statistics
      summary: Get practice area statistics
      description: Returns lawyer counts by practice area for homepage display
      parameters:
        - in: query
          name: country
          schema:
            type: string
          description: Country code to filter lawyers (e.g., 'de', 'at', 'ch')
        - in: query
          name: limit
          schema:
            type: integer
            default: 8
          description: Number of top practice areas to return
      responses:
        '200':
          description: Practice area statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  practiceAreas:
                    type: array
                    items:
                      type: object
                      properties:
                        practiceArea:
                          type: string
                          description: Practice area identifier (e.g., FAMILY_LAW)
                        count:
                          type: integer
                          description: Number of lawyers in this practice area
                        percentage:
                          type: number
                          description: Percentage of total lawyers
                  totalLawyers:
                    type: integer
                    description: Total number of lawyers
                  lastUpdated:
                    type: string
                    format: date-time
                    description: When statistics were last calculated
        '500':
          description: Internal server error
  /api/stats/overview:
    get:
      tags:
        - Statistics
      summary: Get platform overview statistics
      description: Returns general platform statistics for homepage display
      parameters:
        - in: query
          name: country
          schema:
            type: string
          description: Country code to filter statistics
      responses:
        '200':
          description: Platform statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  lawyers:
                    type: integer
                    description: Total number of verified lawyers
                  cities:
                    type: integer
                    description: Number of cities covered
                  practiceAreas:
                    type: integer
                    description: Number of practice areas available
                  averageRating:
                    type: number
                    description: Average lawyer rating
                  totalReviews:
                    type: integer
                    description: Total number of reviews
  /api/stats/cities:
    get:
      tags:
        - Statistics
      summary: Get popular cities statistics
      description: Returns cities with most lawyers for homepage display
      parameters:
        - in: query
          name: country
          schema:
            type: string
          description: Country code to filter cities
        - in: query
          name: limit
          schema:
            type: integer
            default: 8
          description: Number of top cities to return
      responses:
        '200':
          description: Cities statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  cities:
                    type: array
                    items:
                      type: object
                      properties:
                        city:
                          type: string
                          description: City name
                        count:
                          type: integer
                          description: Number of lawyers in this city
                        percentage:
                          type: number
                          description: Percentage of total lawyers
                  totalLawyers:
                    type: integer
                    description: Total number of lawyers
                  lastUpdated:
                    type: string
                    format: date-time
  /api/users:
    get:
      tags:
        - Users
      summary: List users
      description: Get list of users in organization (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithMemberships'
        '403':
          description: Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get user details (admin or own profile)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithMemberships'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update user
      description: Update user information (admin or own profile)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/users/account:
    delete:
      tags:
        - Users
      summary: Delete user account (GDPR compliance)
      description: Permanently delete user account and all associated data
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Account deleted successfully
        '401':
          description: Authentication required
        '403':
          description: Access denied
  /api/users/data:
    delete:
      tags:
        - Users
      summary: Delete user data (GDPR compliance)
      description: Delete specific user data while keeping account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Data deleted successfully
        '401':
          description: Authentication required
    post:
      tags:
        - Users
      summary: Upload user data with size limits
      description: Upload user data with capacity management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
      responses:
        '200':
          description: Data uploaded successfully
        '401':
          description: Authentication required
        '413':
          description: Payload too large
  /api/users/export:
    get:
      tags:
        - Users
      summary: Export user data (GDPR compliance)
      description: Export all user data for backup/portability
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User data export
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Authentication required
  /api/users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Get current user profile with filtered sensitive data
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
        '401':
          description: Authentication required
    put:
      tags:
        - Users
      summary: Update user profile with XSS protection
      description: Update user profile with input sanitization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid input
        '401':
          description: Authentication required
  /api/users/update:
    post:
      tags:
        - Users
      summary: Update user with validation
      description: Update user information with input validation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                age:
                  type: integer
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid input data
        '401':
          description: Authentication required
  /api/users/search:
    post:
      tags:
        - Users
      summary: Search users with input sanitization
      description: Search users with protection against malicious queries
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
      responses:
        '200':
          description: Search results
        '400':
          description: Invalid search query
        '401':
          description: Authentication required
  /api/users/comment:
    post:
      tags:
        - Users
      summary: Add user comment with XSS protection
      description: Add user comment with input sanitization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: Comment added successfully
        '400':
          description: Invalid comment
        '401':
          description: Authentication required
  /api/users/list:
    get:
      tags:
        - Users
      summary: List users with filtered output
      description: Get list of users with sensitive data filtering
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users (filtered)
        '401':
          description: Authentication required
  /api/users/payment-methods:
    get:
      tags:
        - Users
      summary: Get user payment methods with data masking
      description: Get payment methods with sensitive data masked
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Payment methods (masked)
        '401':
          description: Authentication required
  /api/users/avatar:
    post:
      tags:
        - Users
      summary: Upload user avatar with file validation
      description: Upload avatar with file type and size validation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar uploaded successfully
        '400':
          description: Invalid file type or size
        '401':
          description: Authentication required
  /api/webhooks/receive/{provider}:
    post:
      tags:
        - Webhooks
      summary: Receive webhook from external service
      description: Generic webhook endpoint that accepts webhooks from various services
      parameters:
        - in: path
          name: provider
          required: true
          schema:
            type: string
            enum:
              - brevo
              - stripe
              - mailgun
              - sendgrid
              - twilio
              - webhook
          description: The webhook provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              event: contact.subscribe
              email: user@example.com
              firstName: John
              lastName: Doe
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook data
        '401':
          description: Invalid signature
  /api/webhooks/endpoints:
    get:
      tags:
        - Webhooks
      summary: List webhook endpoints (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of webhook endpoints
    post:
      tags:
        - Webhooks
      summary: Create webhook endpoint (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - provider
                - url
              properties:
                name:
                  type: string
                description:
                  type: string
                provider:
                  type: string
                  enum:
                    - BREVO
                    - STRIPE
                    - MAILGUN
                    - SENDGRID
                    - TWILIO
                    - WEBHOOK
                url:
                  type: string
                secret:
                  type: string
                events:
                  type: array
                  items:
                    type: string
                organizationId:
                  type: string
      responses:
        '201':
          description: Webhook endpoint created
  /api/webhooks/endpoints/{id}:
    put:
      tags:
        - Webhooks
      summary: Update webhook endpoint (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Webhook endpoint updated
    delete:
      tags:
        - Webhooks
      summary: Delete webhook endpoint (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Webhook endpoint deleted
  /api/webhooks/events:
    get:
      tags:
        - Webhooks
      summary: List webhook events (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: provider
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: List of webhook events
  /api/webhooks/events/{id}/retry:
    post:
      tags:
        - Webhooks
      summary: Retry failed webhook event (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Webhook event retried
  /api/webhooks/stats:
    get:
      tags:
        - Webhooks
      summary: Get webhook statistics (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: provider
          schema:
            type: string
        - in: query
          name: organizationId
          schema:
            type: string
      responses:
        '200':
          description: Webhook statistics
  /api/webhooks/automations:
    get:
      tags:
        - Webhooks
      summary: List webhook automations (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of webhook automations
    post:
      tags:
        - Webhooks
      summary: Create webhook automation (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - provider
                - eventType
                - actionType
                - actionConfig
              properties:
                name:
                  type: string
                description:
                  type: string
                provider:
                  type: string
                  enum:
                    - BREVO
                    - STRIPE
                    - MAILGUN
                    - SENDGRID
                    - TWILIO
                    - WEBHOOK
                eventType:
                  type: string
                actionType:
                  type: string
                  enum:
                    - CREATE_CONTACT
                    - UPDATE_CONTACT
                    - CREATE_LEAD
                    - SEND_EMAIL
                    - CREATE_TASK
                    - WEBHOOK_CALL
                actionConfig:
                  type: object
                conditions:
                  type: object
                organizationId:
                  type: string
            example:
              name: Create contact on newsletter subscription
              description: Automatically create a contact when someone subscribes to newsletter
              provider: BREVO
              eventType: contact.subscribe
              actionType: CREATE_CONTACT
              actionConfig:
                additionalFields:
                  tags:
                    - newsletter
                    - subscriber
              organizationId: org-123
      responses:
        '201':
          description: Webhook automation created
  /api/webhooks/subscriptions:
    get:
      tags:
        - Webhooks
      summary: List subscriptions
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: provider
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
      responses:
        '200':
          description: List of subscriptions
